#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<unistd.h>

int main()
{
      pid_t pid;
      int status;
      pid = status;
      pid=fork();
            if(pid<0)
            {
                  fprintf(stder, "fork failend\n");
                  return 1;
            }
            else if(pid==0)
            {
                  printf("child process running\n");
                  sleep(2);
                  int exit_status=rand()%100;
                  printf("child process exiting with status:%d\n", exit_status);
                  exit(exit_status);
            }
            else
            {
                  printf("parent process waiting for child to terminate\n");
                  waitpid(pid,&status,0);
                  if(WIFEXITED(status))
                  {
                        printf("child process exited with status:%d\n",WIFEXITSTATUS(status));
                  }
                  else
                  {
                        printf("child process exited abnormally\n");
                  }
            }
}
